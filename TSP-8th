

package com.tsp;
import java.util.Arrays;
import java.util.Scanner;

 class TSPAlgorithm {
private final int[][] distance;
private final int n;
private final int[][] dp;
public TSPAlgorithm(int[][] distance) {
this.distance = distance;
this.n = distance.length;
this.dp = new int[n][n];
for (int i = 0; i < n; i++) {
for (int j = 0; j < n; j++) {
dp[i][j] = -1;
}
}
}
private int tsp(int currentCity, boolean[] visited, int count) {
if (count == n) return distance[currentCity][0];
if (dp[currentCity][count] != -1) return dp[currentCity][count];
int minCost = Integer.MAX_VALUE;
for (int nextCity = 0; nextCity < n; nextCity++) {
if (!visited[nextCity]) {
visited[nextCity] = true;
int newCost = distance[currentCity][nextCity] + tsp(nextCity,
visited, count + 1);
minCost = Math.min(minCost, newCost);
visited[nextCity] = false;
}
}
return dp[currentCity][count] = minCost;
}
public int findMinCost() {
boolean[] visited = new boolean[n];
visited[0] = true;
return tsp(0, visited, 1);
}
public String findPath() {
boolean[] visited = new boolean[n];
StringBuilder path = new StringBuilder("0 -> ");
visited[0] = true;
int currentCity = 0;
for (int count = 1; count < n; count++) {
int nextCity = -1;
int minCost = Integer.MAX_VALUE;
for (int city = 0; city < n; city++) {
if (!visited[city] && distance[currentCity][city] < minCost) {
minCost = distance[currentCity][city];
nextCity = city;
}
}
visited[nextCity] = true;
path.append(nextCity).append(" -> ");
currentCity = nextCity;
}
path.append("0");
return path.toString();
}
}
public class TSP {
public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);
System.out.print("Enter the number of cities: ");
int n = scanner.nextInt();
int[][] distance = new int[n][n];
System.out.println("Enter the distances between cities :");
for (int i = 0; i < n; i++) {
for (int j = 0; j < n; j++) {
if (i == j) {
distance[i][j] = 0;
} else {
System.out.print("Distance from city " + i + " to city " + j +
": ");
distance[i][j] = scanner.nextInt();
}
}
}
TSPAlgorithm tsp = new TSPAlgorithm(distance);
int minCost = tsp.findMinCost();
String path = tsp.findPath();
System.out.println("Minimum cost of traveling: " + minCost);
System.out.println("Path: " + path);
scanner.close();
}
}
